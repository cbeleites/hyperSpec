# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE 1:
# This script automatically detects the repository in which it is run.
# No edits are needed except in the "Install Dependencies" section where
# one may need to install additional packages according to the needs.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE 2:
# Each "- name:" task below starts from the same directory, which is:
# /home/runner/work/${{ REPOSITORY_NAME }}/${{ REPOSITORY_NAME }}
# e.g.:
# /home/runner/work/hyperSpec/hyperSpec
# Each task is run in its own shell starting from this directory.
# This means you have to navigate to the desired directory for each task.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE 3:
# If more than one branch given to trigger the workflow,
# one may stomp on the other during deployment, so use only one branch.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

on:
  push:
    branches:
      - develop

name: Insert package (drat)

jobs:
  drat:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - {os: ubuntu-18.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      REPO: ${{ github.event.repository.name }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}


    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        # if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04"))')

      - name: Install dependencies
        shell: Rscript {0}
        run: |
          remotes::install_cran(c("roxygen2", "devtools", "drat"))
          remotes::install_deps(dependencies = TRUE)

      - name: Roxygenize
        shell: Rscript {0}
        run: |
          roxygen2::roxygenize()


      - name: Build source package
        shell: Rscript {0}
        run: |
          dir.create("check", showWarnings = FALSE)
          devtools::build(path = "check")

# Above are the steps to build package
# Below are the steps to deploy to pkg-repo
      - name: Configure git
        # The following configure step is from
        # https://stackoverflow.com/a/60548651/633251
        env:
          TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

          git config --global user.email "${REPO}_Deploy_Bot@example.com"
          git config --global user.name "${REPO} Deploy Bot"

      - name: Drat -- clone r-hyperspec/pkg-repo
        if: success()
        run: |
          rm -rf tmp-pkg-repo-dir
          git clone https://github.com/r-hyperspec/pkg-repo.git tmp-pkg-repo-dir
          cd tmp-pkg-repo-dir
          git checkout gh-pages

      - name: Drat -- insert
        if: success()
        shell: Rscript {0}
        run: |
          targz <- list.files(
            path = "check",
            pattern = "\\.tar\\.gz",
            full.names = TRUE
          )

          drat::insertPackage(
            file    = targz,
            repodir = "tmp-pkg-repo-dir",
            action  = "archive"
          )

      - name: Drat -- commit and push
        if: success()
        run: |
          cd tmp-pkg-repo-dir
          git add *
          # .tar.gz files are globally blocked (git ignored) by git,
          # must add manually and force it
          git add -f *.tar.gz
          git commit -m "Automated deploy from ${REPO}"
          git push origin gh-pages
